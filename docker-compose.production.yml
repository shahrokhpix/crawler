version: '3.8'

services:
  # Load Balancer (Nginx)
  nginx:
    image: nginx:alpine
    container_name: farsnews-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app1
      - app2
      - app3
      - app4
    restart: unless-stopped
    networks:
      - farsnews-network

  # Application instances
  app1:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: farsnews-app1
    environment:
      - NODE_ENV=production
      - WORKERS=2
      - MAX_MEMORY=512M
      - DB_HOST=postgres
      - REDIS_HOST=redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - farsnews-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  app2:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: farsnews-app2
    environment:
      - NODE_ENV=production
      - WORKERS=2
      - MAX_MEMORY=512M
      - DB_HOST=postgres
      - REDIS_HOST=redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - farsnews-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  app3:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: farsnews-app3
    environment:
      - NODE_ENV=production
      - WORKERS=2
      - MAX_MEMORY=512M
      - DB_HOST=postgres
      - REDIS_HOST=redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - farsnews-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  app4:
    build:
      context: .
      dockerfile: Dockerfile.production
    container_name: farsnews-app4
    environment:
      - NODE_ENV=production
      - WORKERS=2
      - MAX_MEMORY=512M
      - DB_HOST=postgres
      - REDIS_HOST=redis
    volumes:
      - ./logs:/app/logs
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
    restart: unless-stopped
    networks:
      - farsnews-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: farsnews-postgres
    environment:
      POSTGRES_DB: farsnews_prod
      POSTGRES_USER: farsnews_user
      POSTGRES_PASSWORD: ${DB_PASSWORD:-secure_password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    networks:
      - farsnews-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: farsnews-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - farsnews-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: farsnews-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - farsnews-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: farsnews-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
    volumes:
      - grafana_data:/var/lib/grafana
    restart: unless-stopped
    networks:
      - farsnews-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  farsnews-network:
    driver: bridge